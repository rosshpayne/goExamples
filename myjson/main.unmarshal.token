package main

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"
)

func main() {
	const jsonStream = `
		[
			{"Name": "Ed", "Text": "Knock knock."},
			{"Name": "Sam", "Text": "Who's there?"},
			{"Name": "Ed", "Text": "Go fmt."},
			{"Name": "Sam", "Text": "Go fmt who?"},
			{"Name": "Ed", "Text": "Go fmt yourself!"}
		]
	`                                              // JSON array containing json objects
        type Point struct {
		Name, Text string                      // note fields are exposed
        }
	type Message struct {
		Point                                   // anonymous embedded struct - fields are exposed to Message for Json decode purposes
	}
	dec := json.NewDecoder(strings.NewReader(jsonStream)) // strings.NewReader(s string) *Reader - satisfies, io.Reader,io.Seeker,io.ReadAt,io.WriteTo,io.ByteScanner,io.RunScanner

	// read open bracket
	t, err := dec.Token()                           // Token returns type Token interface{} - an anything interface value
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Token  %T: %v\n", t, t)             // Printf will determine t dynamic type and print it.

	// while the array contains values
	for dec.More() {
		var m Message
		// decode an array value (Message)
		err := dec.Decode(&m)                   // Decode from JSON into Go via a stream source.
		if err != nil {
			log.Fatal(err)
		}

		fmt.Printf("v  %v: %v\n", m.Name, m.Text)
	}

	// read closing bracket
	t, err = dec.Token()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Token  %T: %v\n", t, t)

}

