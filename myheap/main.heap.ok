// This example demonstrates an integer heap built using the heap interface.
package main

import (
	"container/heap"
	"fmt"
)

// An IntHeap is a min-heap of ints.
type IntHeap []int

func (h IntHeap) Len() int           { return len(h) }
func (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }
func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Push(x interface{}) {
	// Push and Pop use pointer receivers because they modify the slice's length,
	// not just its contents and do not return final slice - so must use pointer to pass back to caller.
	*h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

// This example inserts several ints into an IntHeap, checks the minimum,
// and removes them in order of priority.
func main() {
	h := &IntHeap{8, 3, 5}                          // use pointer to slice as methods change the slice len and don't return the slice, hence must use pointer.
							// also, methods use pointer receiver type
	for i,v := range *h {
	   fmt.Printf("%d %d\n", i,v)
	}
	heap.Init(h)
	for i,v := range *h {
	   fmt.Printf("  %d %d\n", i,v)
	}
	heap.Push(h, 2)
	heap.Push(h, 7)
        for i,v := range *h {
	   fmt.Printf("%d %d\n", i,v)
	}
	fmt.Printf("\nminimum: %d\n\n", (*h)[0])         // minimum value manipulated to be at index 0, all other entries are as pushed
        //
        // pop 
        //
	for h.Len() > 0 {
		fmt.Printf("pop   %d \n", heap.Pop(h))
	}
}
